y <- rnorm(N)#
points(density(y), type = "l", main =#
     "density function of normal distribution", lwd=2)
f_norm <- function(x){#
  return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
}#
#
out.norm <- calc_sample(N=N, f=f_norm, a=-5, b=5)#
plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
     main="Normal distribution")#
#
y <- rnorm(N)#
points(density(y), type = "l", main =#
     "density function of normal distribution", lwd=2)#
#
ks.test(out.norm$sample, y1)
y <- dnorm(x)#
points(x, y, type = "l", main =#
     "density function of normal distribution", lwd=2)#
#
y1 <- rnorm(N)#
ks.test(out.norm$sample, y1)
f_norm <- function(x){#
  return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
}#
#
out.norm <- calc_sample(N=N, f=f_norm, a=-5, b=5)#
plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
     main="Normal distribution")#
#
y <- dnorm(x)#
points(x, y, type = "l", main =#
     "density function of normal distribution", lwd=2)#
#
y1 <- rnorm(N)#
ks.test(out.norm$sample, y1)
?text
out.log <- calc_sample(N=N, f=dlogistic, a=-5, b=5)
dlogistic <- function(x){#
  return(exp(x)/(1+exp(x))^2)#
}#
#
out.log <- calc_sample(N=N, f=dlogistic, a=-5, b=5)
plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
     main="Logistic distribution")
y <- dlogistic(x)#
points(x, y, type = "l", main = "density function of logistic distribution")
y1 <- rlogis(N)#
test.log <- ks.test(out.log$sample, y1)
test.log
## *******************************************************#
## iii. Logistic Distribution#
dlogistic <- function(x){#
  return(exp(x)/(1+exp(x))^2)#
}#
#
out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
     main="Logistic distribution")#
#
y <- dlogistic(x)#
points(x, y, type = "l", main = "density function of logistic distribution")#
#
y1 <- rlogis(N)#
test.log <- ks.test(out.log$sample, y1)
test.log
install.packages()"LapacesDemon")
install.packages("LapacesDemon")
install.packages("LapacesDemon")
install.packages("Runuran")
library(Runurun)
library(Runuran)
?urpowerexp
## *******************************************************#
## iv. Subbotin Distribution#
dsubbotin <- function(x, r = 2){#
  C_r <- 2 * gamma(1/r) * r^(1/r-1)#
  return(exp(-abs(x)^r/r)/C_r)#
}#
#
out.sub <- calc_sample(N=N, f=dsubbotin, a=-10, b=10)#
plot(density(out.sub$sample), type="l", col="dodgerblue", lwd=2,#
     main="Subbotin distribution")#
#
y <- dsubbotin(x)#
plot(x, y, type = "l")
out.sub <- calc_sample(N=N, f=dsubbotin, a=-10, b=10)#
plot(density(out.sub$sample), type="l", col="dodgerblue", lwd=2,#
     main="Subbotin distribution")#
#
y <- dsubbotin(x)#
points(x, y, type = "l")
y1 <- urpowerexp(N, shape=2)#
test.sub <- ks.test(out.sub$sample, y1)
test.sub
out.sub <- calc_sample(N=N, f=dsubbotin, a=-100, b=100)#
plot(density(out.sub$sample), type="l", col="dodgerblue", lwd=2,#
     main="Subbotin distribution")#
#
y <- dsubbotin(x)#
points(x, y, type = "l")#
#
y1 <- urpowerexp(N, shape=2)#
test.sub <- ks.test(out.sub$sample, y1)
out.sub <- calc_sample(N=N, f=dsubbotin, a=-20, b=20)#
plot(density(out.sub$sample), type="l", col="dodgerblue", lwd=2,#
     main="Subbotin distribution")#
#
y <- dsubbotin(x)#
points(x, y, type = "l")#
#
y1 <- urpowerexp(N, shape=2)#
test.sub <- ks.test(out.sub$sample, y1)
test.sub
y1 <- urpowerexp(N, shape=1/2)#
test.sub <- ks.test(out.sub$sample, y1)
test.sub
?runif
x <- seq(0, 20, len = N)#
#
dgamma <- function(x, theta=2, k=2){#
 return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
}#
#
out.gam <- calc_sample(N=N, f=dgamma, a=0, b=20)
x <- seq(0, 20, len = N)#
#
dgamma <- function(x, theta=2, k=2){#
 return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
}#
#
out.gam <- calc_sample(N=N, f=dgamma, a=1, b=20)
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, shape = 1/2, rate = 1/2)#
points(x, y, type = "l")
?dgamma
y <- dgamma(x, scale = 1/2, rate = 1/2)
## *******************************************************#
## vii. Gamma Distribution (chi square)#
x <- seq(0, 20, len = N)#
#
dgam <- function(x, theta=2, k=2){#
 return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
}#
#
out.gam <- calc_sample(N=N, f=dgam, a=1, b=20)#
#
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, scale = 1/2, rate = 1/2)#
points(x, y, type = "l")
rm(ls=list())
rm(list=ls())
library(Runuran)#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
## LOG-CONCAVE DENSITY FUNCTION#
set.seed(4)#
N <- 10000#
#
x <- seq(-5, 5, len = N)
x <- seq(0, 20, len = N)#
#
dgam <- function(x, theta=2, k=2){#
 return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
}#
#
out.gam <- calc_sample(N=N, f=dgam, a=1, b=20)#
#
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, scale = 1/2, rate = 1/2)
y <- dgamma(x, shape = 1/2, rate = 1/2)
points(x, y, type = "l")#
#
test.gam <- ks.test(out.gam$sample, y1)
y1 <- rgamma(N, shape = 1/2, rate = 1/2)
y <- dgamma(x, shape = 1/2, scale = 1/2)#
points(x, y, type = "l")
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, shape = 1/2, scale = 1/2)#
points(x, y, type = "l")
out.gam <- calc_sample(N=N, f=dgam, a=1, b=20)#
#
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, shape = 1/2, scale = 2)#
points(x, y, type = "l")
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, shape = 2, scale = 2)#
points(x, y, type = "l")
y1 <- rgamma(N, shape = 2, scale = 2)#
test.gam <- ks.test(out.gam$sample, y1)
test.gam
out.gam <- calc_sample(N=N, f=dgam, a=0, b=20)
x <- seq(0, 100, len = N)#
#
dgam <- function(x, theta=2, k=2){#
 return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
}#
#
out.gam <- calc_sample(N=N, f=dgam, a=0, b=1000)#
#
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, shape = 2, scale = 2)#
points(x, y, type = "l")#
#
y1 <- rgamma(N, shape = 2, scale = 2)#
test.gam <- ks.test(out.gam$sample, y1)
x <- seq(0, 100, len = N)#
#
dgam <- function(x, theta=2, k=2){#
 return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
}#
#
out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
     main="Gamma distribution")#
#
y <- dgamma(x, shape = 2, scale = 2)#
points(x, y, type = "l")#
#
y1 <- rgamma(N, shape = 2, scale = 2)#
test.gam <- ks.test(out.gam$sample, y1)
test.gam
dbet <- function(x, alpha=0.5, b=0.5){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}
x <- seq(0, 1, len = N)#
#
dbet <- function(x, alpha=0.5, b=0.5){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}#
#
out.beta <- calc_sample(N=N, f=dbet, a=0, b=1)
out.beta <- calc_sample(N=N, f=dbet, a=0.001, b=0.9999)
dbet <- function(x, alpha=0.5, b=0.5){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}#
#
out.beta <- calc_sample(N=N, f=dbet, a=0.001, b=0.9999)
y <- dbet(x)
plot(x, y, type = "l")
x <- seq(0, 1, len = N)#
#
dbet <- function(x, alpha=2, b=0.5){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}#
#
out.beta <- calc_sample(N=N, f=dbet, a=0.001, b=0.9999)#
#
plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
     main="Beta distribution")#
y <- dbet(x)#
plot(x, y, type = "l")
x <- seq(0, 1, len = N)#
#
dbet <- function(x, alpha=2, b=2){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}#
#
out.beta <- calc_sample(N=N, f=dbet, a=0.001, b=0.9999)#
#
plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
     main="Beta distribution")#
y <- dbet(x)#
#
plot(x, y, type = "l")
x <- seq(0, 1, len = N)#
#
dbet <- function(x, alpha=2, b=2){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}#
#
out.beta <- calc_sample(N=N, f=dbet, a=0.001, b=0.9999)#
#
plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
     main="Beta distribution")
library(testthat)
install.packages("rmutil")
library(rmutil)#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
## LOG-CONCAVE DENSITY FUNCTION#
set.seed(4)#
N <- 10000#
#
x <- seq(-5, 5, len = N)#
#
  ## *******************************************************#
# i. Standard Normal Distribution#
## @knitr external_chunk_1#
#
dnor <- function(x){#
  return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
}#
#
out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
y1 <- rnorm(N)#
test.norm <- ks.test(out.norm$sample, y1)
install.packages("DiscreteLapace")
install.packages("DiscreteLaplace")
y1 <- rdlaplace(N, 0, 1)
library(DiscreteLaplace)
y1 <- rdlaplace(N, 0, 1)
install.packages("NormalLaplace")
library(NormalLaplace)
y1 <- rnl(N, 0, 1)
plot(density(y1))
install.packages("distr")
library(distr)#
D <- DExp(rate = 1) #
r(D)(1)
plot(density(D))
plot(density(r(D))
)
r(D)
dlaplace <- function(x, m = 0, s = 1){#
  return(exp(-abs(x-m)/s)/(2*s))#
}#
#
rlaplace = function(n, mu, sigma){#
  U = runif(n, 0, 1)#
  sign = ifelse(rbinom(n,1,.5) > .5,1,-1)     #
  y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
  return(y)#
}
y1 <- rlaplace(N, 0, 1)
plot(density(y1))
dnor <- function(x){#
  return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
}#
#
out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
y1 <- rnorm(N)#
test.norm <- ks.test(out.norm$sample, y1)
names(test.norm)
test.norm$p.value
check_pval <- function(output, fun.name){#
  if(output$p.value <= 0.05){#
    print(paste("did not pass with", fun.name))#
  }#
}#
  ## *******************************************************#
# i. Standard Normal Distribution#
## @knitr external_chunk_1#
#
dnor <- function(x){#
  return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
}#
#
out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
y1 <- rnorm(N)#
test.norm <- ks.test(out.norm$sample, y1)#
check_pval(test.norm, "normal")
check_pval <- function(output, fun.name){#
  if(output$p.value <= 0.05){#
    print(paste("did NOT pass with", fun.name))#
  } else {#
    print(paste("passed with", fun.name))#
  }#
}#
  ## *******************************************************#
# i. Standard Normal Distribution#
## @knitr external_chunk_1#
#
dnor <- function(x){#
  return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
}#
#
out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
y1 <- rnorm(N)#
test.norm <- ks.test(out.norm$sample, y1)#
check_pval(test.norm, "normal")
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
  check_pval(test.norm, "normal")#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  y1 <- rlaplace(N, 0, 1)#
  test.lap <- ks.test(out.lap$sample, y1)#
  check_pval(test.lap, "laplace")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
  check_pval(test.log, "logistic")#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
  check_pval(test.gam, "gamma")#
#
  return(NULL)#
}#
#
main(1000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      y1 <- rFUN(N)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  browser()#
  test_dist(x=x, FUN=ndor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
#
  out.lap <- try(calc_sample(N=N, f= dlaplace, a=-2, b=2),#
                 silent=TRUE)#
  if(inherits(out.lap, "try-error")) {#
    print(paste("did NOT pass with", fun.name))#
  } else {#
    y1 <- rlaplace(N, 0, 1)#
    test.lap <- ks.test(out.lap$sample, y1)#
    check_pval(test.lap, fun.name)#
  }#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
  check_pval(test.log, "logistic")#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
  check_pval(test.gam, "gamma")#
#
  return(NULL)#
}#
#
main(1000)
test_dist(x=x, FUN=ndor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)
test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)
Q
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      y1 <- rFUN(N)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  browser()#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace)#
    ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
  check_pval(test.log, "logistic")#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
  check_pval(test.gam, "gamma")#
#
  return(NULL)#
}#
#
main(1000)
test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace)
Q
shape = 2, scale = 2
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
  return(NULL)#
}#
#
main(1000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
}#
#
main(1000)
library(Runuran)#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
## LOG-CONCAVE DENSITY FUNCTION#
set.seed(4)#
N <- 10000#
#
x <- seq(-5, 5, len = N)
## *******************************************************#
## viii. Beta Distribution#
x <- seq(0, 1, len = N)#
#
dbet <- function(x, alpha=2, b=2){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}#
#
out.beta <- calc_sample(N=N, f=dbet, a=0.001, b=0.9999)
library(Runuran)#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
## LOG-CONCAVE DENSITY FUNCTION#
set.seed(4)#
N <- 100#
#
x <- seq(-5, 5, len = N)
library(Runuran)#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
## LOG-CONCAVE DENSITY FUNCTION#
set.seed(4)#
N <- 1#
#
x <- seq(-5, 5, len = N)
## *******************************************************#
## viii. Beta Distribution#
x <- seq(0, 1, len = N)#
#
dbet <- function(x, alpha=2, b=2){#
 return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
}#
#
out.beta <- calc_sample(N=N, f=dbet, a=0.001, b=0.9999)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("did NOT pass with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
}#
#
main(1000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("did NOT create an out with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
}#
#
main(1000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
}#
#
main(1000)
library(testthat)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))
Q
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
v
rm(list=ls())#
#setwd('~/GitHub/243project/ars/R') #
require(fields)#
#require(testhat)#
#
Derv <- function(x, FUN, a, b){#
  if (x==a) {return ((FUN(x + 1e-8)-FUN(x))/1e-8)}#
  if (x==b) {return ((FUN(x)-FUN(x - 1e-8))/1e-8)}#
  if (a <= x && x <= b) {return((FUN(x + 1e-8)-FUN(x - 1e-8))/2e-8)}#
}#
#
## updates the info matrix with new x, f, fprime values, and order them#
update_info <- function(x_star, info, itt1, FUN, test_fx, DD){#
  if(nrow(info) < itt1) {#
    tmp <- matrix(NA, nrow = nrow(info), ncol = 3)#
    info <- rbind(info, tmp)#
  }#
  ind <- sum(info[1:(itt1-1), 1] < x_star)#
  info[(ind+2):itt1, ] = info[(ind+1):(itt1-1), ]#
  info[(ind+1), ] = c(x_star,test_fx,DD(x_star))#
  return(info)#
}#
#
## calculate z values, and order them, info should be clean_info#
update_z <- function(x_star, z, itt2, info){#
  if (nrow(info) < 2){#
    stop("something wrong with info matrix", call. = FALSE)#
  }#
  if (nrow(info) == 2){#
    if (abs(info[2,3]-info[1,3])<1e-6) {#
      z_new <- (info[1,1] + info[2,1])/2#
      z[3] = z[2]#
      z[2] = z_new#
      return(z)#
    }#
    z_new <-(info[2, 2] - info[1, 2] -#
               info[2, 1]*info[2, 3] +#
               info[1, 1]*info[1, 3])/#
      (info[1, 3] - info[2, 3])#
    z[3] = z[2]#
    z[2]=z_new#
    return(z)#
  } else {#
    if(length(z) < itt2) {#
      z <- c(z, rep(NA, length(z)))#
    }#
    ind <- which(info[, 1] == x_star)#
    if (sum(abs(diff(info[(ind-1):(ind+1), 3]))<1e-6) ){#
      z_new1 <- info[ind - 1,1] + (info[ind + 1,1]-info[ind - 1,1])/3#
      z_new2 <- info[ind - 1,1] + (info[ind + 1,1]-info[ind - 1,1])*2/3#
    } else {#
      z_new1 <-(info[ind, 2] - info[ind - 1, 2] -#
                  info[ind, 1]*info[ind, 3] +#
                  info[ind - 1, 1]*info[ind - 1, 3])/#
        (info[ind - 1, 3] - info[ind, 3])#
      z_new2 <-(info[ind, 2] - info[ind + 1, 2] -#
                  info[ind, 1]*info[ind, 3] +#
                  info[ind + 1, 1]*info[ind + 1, 3])/#
        (info[ind + 1, 3] - info[ind, 3])#
    }#
    if((round(z_new1,digits = 6) > round(z_new2,digits = 6))){#
      ## print(info[(ind-1):(ind+1),])#
      ## print(c(z_new1,z_new2))#
      stop('something wrong with updated z value, check log-convexity!', call. = FALSE)#
    }#
    z[(ind+2):itt2] = z[(ind+1):(itt2-1)]#
    z[ind] = z_new1#
    z[ind+1] = z_new2#
    return(z)#
  }#
}#
#
## checks log-convexity#
## clean_info is the ordered info matrix#
check_concave <- function(clean_info){#
  if(is.null(clean_info[,3])) {return(TRUE)}#
  return(prod(round(clean_info[,3][-1],5) <= round(clean_info[,3][-nrow(clean_info)],5)))#
}#
#
## takes two points and returns the function of that line#
line_fun <- function(x1, y1, x2, y2, x_star){#
  if(x1 == x2) {stop('Two points in a vertical line')}#
  y_star <- (y2-y1)/(x2-x1)*(x_star-x1)+y1#
  return(y_star)#
}#
#
## tales give x and h'(x), returns the function of that line#
line_fun_p <- function(x1, y1, hpx1, x_star){#
  y_star <- hpx1*(x_star - x1) + y1#
  return(y_star)#
}#
#
## returns a new sample given the info matrix and z#
#input is clean info matrix and clean z#
sample_envelope <- function(samp_info, samp_z){#
  ## segments of bounds#
  p <- rep(NA, nrow(samp_info))#
  p <- exp(samp_info[,2])*(exp((samp_z[-1] - samp_info[,1])*#
                                  samp_info[,3]) -#
                              exp((samp_z[-nrow(samp_info) - 1] -#
                                   samp_info[,1])*#
                                  samp_info[,3]))/samp_info[,3]#
  ## q for normalizing p#
  q <- p/sum(p)#
  ## which region we sample from#
  i <- sum(cumsum(q) < runif(1)) + 1#
  ## sample pi using inv cdf#
  samp_x <- (log(p[i]*runif(1)*samp_info[i, 3] +#
                 exp(samp_info[i,2] +#
                     (samp_z[i] - samp_info[i,1])*samp_info[i,3])) -#
             samp_info[i,2])/samp_info[i,3] + samp_info[i,1]#
  names(samp_x) <- NULL#
  return(samp_x)#
}#
#
#Rprof('test.prof', interval=0.001)#
## main function to implement adaptive rejection algorithm#
## fp is the optional fprime, expressed an an expression#
## N is the number of desired samples#
## a and b are the starting values#
## expr is the function of interest expressed expression#
#
## anyother issues with a,b?? works for where function is not log#
## concave#
calc_sample <- function(N, f, a, b ,DFUN = NA, aa = NA, bb = NA){#
  if(class(f) != "function"){#
    stop('please provide f as an function', call. = FALSE)#
  }#
  if(!is.na(DFUN)){#
    if(class(DFUN) != "function"){#
      warning('DFUN is not an function, re-creating from FUN',#
              call. = FALSE, immediate.= TRUE)#
      DFUN <- NA#
    }#
  }#
#
  if(a == b){#
    stop('please provide different a and b', call. = FALSE)#
  }#
#
  #log of density function: right now, users can input density function#
  FUN <- function(x,fun = f){#
    return(log(fun(x)))#
  }#
  #differentiate it using the function we define#
  Derv_final <- function(x,fun=FUN){#
    return(Derv(x,fun,a,b))#
  }#
  ## preparation and initialize#
  ## something needs to happen here where we use numerical#
  ## differentiation instead#
#
  if(!is.na(DFUN)){#
    DD<- DFUN#
  } else{#
    DD <- Derv_final#
  }#
  # ## initial return sample#
  ret <- rep(NA, N)#
  ## matrix for x, f, fprime values, initialize at the expected length#
  ## from Gilks et al. 1992 with a little extra#
  info <- matrix(NA, nrow = as.integer((N^(1/3) + 2)),#
                 ncol = 3)#
  ## how to initialize the info matrix#
  if (a != -Inf && b != Inf){#
    info[1, 1] <- a#
    info[1, 2] <- FUN(info[1, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('a is not defined on f', call. = FALSE)#
    }#
    info[1, 3] <- DD(info[1, 1])#
    info[2, 1] <- b#
    info[2, 2] <- FUN(info[2, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('b is not defined on f', call. = FALSE)#
    }#
    info[2, 3] <- DD(info[2, 1])#
  } #
  if (a == -Inf && b != Inf){#
    if (is.na(aa)){#
      stop('For left infinity case, please give a conservative point less than mod', call. = FALSE)#
    }#
    test <- DD(aa)#
    while (-Inf < test && test <= 0){#
      aa <- 2 * aa - b#
      test <- DD(aa)#
    }#
    info[1, 1] <- aa#
    info[1, 2] <- FUN(info[1, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('a is not defined on f', call. = FALSE)#
    }#
    info[1, 3] <- DD(info[1, 1])#
    info[2, 1] <- b#
    info[2, 2] <- FUN(info[2, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('b is not defined on f', call. = FALSE)#
    }#
    info[2, 3] <- DD(info[2, 1])#
    if ((abs(info[2, 3]) < 1e-6)&&(abs(info[1, 3])< 1e-6)){#
      return (list(f = FUN,#
                   fprime = DD,#
                   sample = runif(n=N ,a, b),#
                   info = info[1:2,]))#
    }#
  }#
  if (a != -Inf && b == Inf){#
    if (is.na(bb)){#
      stop('For right infinity case, please give a conservative point larger than mod', call. = FALSE)#
    }#
    test <- DD(bb)#
    while (0 <=  test && test < Inf){#
      bb <- 2 * bb - a#
      test <- DD(bb)#
    }#
    info[1, 1] <- a#
    info[1, 2] <- FUN(info[1, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('a is not defined on f', call. = FALSE)#
    }#
    info[1, 3] <- DD(info[1, 1])#
    info[2, 1] <- bb#
    info[2, 2] <- FUN(info[2, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('b is not defined on f', call. = FALSE)#
    }#
    info[2, 3] <- DD(info[2, 1])#
  }#
  if (a == -Inf && b == Inf){#
    if (is.na(aa) || is.na(bb)){#
      stop('For both infinity case, please give a conservative region containing mod', call. = FALSE)#
    }#
    test <- DD(aa)#
    while (-Inf < test && test <= 0){#
      aa <- 2 * aa - b#
      test <- DD(aa)#
    }#
    test <- DD(bb)#
    while (0 <=  test && test < Inf){#
      bb <- 2 * bb - a#
      test <- DD(bb)#
    }#
    info[1, 1] <- aa#
    info[1, 2] <- FUN(info[1, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('a is not defined on f', call. = FALSE)#
    }#
    info[1, 3] <- DD(info[1, 1])#
    info[2, 1] <- bb#
    info[2, 2] <- FUN(info[2, 1])#
    if(!is.finite(info[1, 2])) {#
      stop('b is not defined on f', call. = FALSE)#
    }#
    info[2, 3] <- DD(info[2, 1])#
  }#
  ## starting index#
  itt1 <- itt2 <- 3#
  z <- c(a, b, rep(NA, as.integer((N^(1/3) + 2))))#
  z <- update_z(b, z, itt2, info[1:(itt1-1), ])#
  itt2 <- itt2 + 1#
  sample <- it <- 0#
  ## sample step#
  while(sample < N){#
    it <- it + 1#
    clean_info <- info[1:(itt1-1),]#
    ## check log-concavity of f(x)#
    if(!check_concave(clean_info)) {#
      print(clean_info)#
      stop('Input is not log-concave function', call. = FALSE)#
    }#
    clean_z <- z[1:(itt2-1)]#
    #sample!!!#
    x <- sample_envelope(clean_info, clean_z)#
#
    ## check if x is defined on fx#
    test_fx <- FUN(x)#
    ## draw a new x if not#
    if(!is.finite(test_fx)) next#
    ## whether we reject the sample#
    w <- runif(1)#
    ## check if this value of x have been drawn before. If that is the#
    ## case, we can directly throw it into the info matrix or sample#
    if(is.element(x, clean_info[,1])){#
      info <- update_info(x, info, itt1, FUN, test_fx,DD)#
      itt1 <- itt1 + 1#
      z <- update_z(x, z, it, info)#
      itt2 <- itt2 + 1#
      if(is.element(x, ret)){#
        ret[sample] <- x#
        sample <- sample +1#
      }#
      next#
    }#
    ## get the corresponding point on upper bound of lower bound#
    ind1 <- rev(which(clean_info[ ,1] < x))[1]#
    ind2 <- which(clean_info[ ,1] > x)[1]#
    if (is.na(ind1) || is.na(ind2)) {next}#
    ## calculate lower bound#
    lx <- line_fun(clean_info[ind1, 1],#
                   clean_info[ind1, 2],#
                   clean_info[ind2, 1],#
                   clean_info[ind2, 2], x)#
    if(x <= clean_z[ind1 + 1]){#
      ux <- line_fun_p(clean_info[ind1, 1],#
                       clean_info[ind1, 2],#
                       clean_info[ind1, 3], x)#
    } else{#
      ux <- line_fun_p(clean_info[ind2, 1],#
                       clean_info[ind2, 2],#
                       clean_info[ind2, 3], x)#
    } #
#
    ## reject/accept sample#
    if(w <= exp(lx - ux)) {#
      sample <- sample + 1#
      ret[sample] <- x #
      next#
    } else{#
      if(w <= exp(test_fx - ux)){#
        sample <- sample +1#
        ret[sample] <- x#
      }#
      info <- update_info(x, info, itt1, FUN, test_fx,DD)#
      itt1 <- itt1 + 1#
      z <- update_z(x, z, itt2, info)#
      itt2 <- itt2 + 1#
    } #
  }#
  ## return sample#
  hit_rate <- length(ret)/it #use it instead of itt1#
  return(list(f=FUN,#
              fprime=DD,#
              sample = ret,#
              hit_rate = hit_rate,#
              info = info[1:(itt1-1),],#
              z = z[1:(itt2-1)]))#
}#
f <- function(x){#
  return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
}#
dlaplace <- function(x, m = 0, s = 1){#
  return(exp(-abs(x-m)/s)/(2*s))#
}#
#
## system.time(out <- calc_sample(N=10000, dlaplace, a=-2, b=2))#
## #out <- calc_sample(N=100000, dnorm, a=-Inf, b=1, aa = -1)#
#
## hist(out$sample,breaks  = 50)#
## #Rprof(NULL)#
## #summaryRprof('test.prof')#
## ### test if larger range is given (-50,50)#
## # system.time(out <- calc_sample(N=10000, dnorm, a=-50, b=50))#
# Derv <- function(x,FUN){#
#   return((FUN(x + 0.000000001)-FUN(x))/0.000000001)#
# }
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name, "pvalue=" output$p.value))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name))#
    } else {#
      print(paste("passed with", fun.name, "pvalue=", output$p.value))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  "pvalue=", output$p.value))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  "pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-2, b=2, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)#
#
f <- function(x){#
  return(dunif(x, min))#
}
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  fun.name <- "uniform"#
  duni <- function(x){#
    return(dunif(x, min))#
  }#
#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi. non-concave distribution#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  fun.name <- "uniform"#
  duni <- function(x){#
    return(dunif(x, min))#
  }#
#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi. non-concave distribution#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  fun.name <- "uniform"#
  duni <- function(x){#
    return(dunif(x, min))#
  }#
#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi. non-concave distribution#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  fun.name <- "uniform"#
  duni <- function(x){#
    return(dunif(x, min))#
  }#
  test_dist(x=x, FUN=duni,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi. non-concave distribution#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  fun.name <- "uniform"#
  duni <- function(x){#
    return(dunif(x, min=-1, max=1))#
  }#
  test_dist(x=x, FUN=duni,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi. non-concave distribution#
  x <- seq(-1, 1, len = N)#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(-1, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=-1, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)
x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)
x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)
x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)
?rbeta
?rbeta
?beta
rbeta
?rbeta
rbeta(100, 2,2)
plot(density(rbeta(100, 2,2))
)
plot(density(rbeta(1000, 2,2)))
plot(density(rbeta(10000, 2,2)))
dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }
plot(x=x, y=dbet(x))
x <- seq(0, 1, len = N)
N <- 1000
plot(x=x, y=dbet(x))
x <- seq(0, 1, len = N)
plot(x=x, y=dbet(x))
points(density(rbeta(10000, 2,2)))
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    browser()#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)
calc_sample(N=N, f=FUN, a=a, b=b)
Q
setwd('~/GitHub/243project/writeup.R')#
source('../ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)
setwd('~/GitHub/243project/writeup.R')#
source('../ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)
library(Runuran)#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix)#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
pdf_f(plot_densities, file="figures/densities.pdf")
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)
library(Runuran)#
setwd('~/GitHub/243project/writeup.R')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix)#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup.R')
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix)#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6), nrow=3)#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(N){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
pdf_f(plot_densities, N=100, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(N){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf")
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape=2, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.001, 1, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## viii. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution")#
#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution")#
#
  y <- dunif(x)#
  plot(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf")
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbeta,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf")
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l", col="dodgerblue", lwd=2,#
       main="Beta distribution")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
?density
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(3, 6, 5, 1),#
      mar=c(5, 0.5, 0.5, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(1, 1, 1, 1),#
      mar=c(0.5, 0.5, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(0.5, 0.5, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(1, 1, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0.1, 0.9, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 1000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-2, b=2)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0.1, 0.9, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0.1, 0.9, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(10000)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0.1, 0.9, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.1, b=0.9)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
#
  y1 <- rnorm(N)#
  test.norm <- ks.test(out.norm$sample, y1)#
#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  x <- seq(-10, 10, len = N)#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.01, b=0.99)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  x <- seq(-10, 10, len = N)#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.01, b=0.99)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 100#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(100)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  x <- seq(-10, 10, len = N)#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  y1 <- rlogis(N)#
  test.log <- ks.test(out.log$sample, y1)#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  y1 <- rgamma(N, shape = 2, scale = 2)#
  test.gam <- ks.test(out.gam$sample, y1)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.01, b=0.99)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  x <- seq(-10, 10, len = N)#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  legend("topright", legend=c("Sample", "Theoretical"),#
         col=c("dodgerblue", "black"), lwd=2)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.01, b=0.99)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  x <- seq(-10, 10, len = N)#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  legend("topright", legend=c("Sample", "Theoretical"),#
         col=c("dodgerblue", "black"), lwd=2, btw="n")#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.01, b=0.99)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  x <- seq(-10, 10, len = N)#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  legend("topright", legend=c("Sample", "Theoretical"),#
         col=c("dodgerblue", "black"), lwd=2, btw=n)#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.01, b=0.99)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
?ledgend
?legend
setwd('~/GitHub/243project/writeup')#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
## nice little pdf function#
pdf_f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
plot_densities <- function(){#
  layout(matrix(1:6, nrow=3))#
  par(oma=c(2, 1, 1, 1),#
      mar=c(2, 2, 2, 1),#
      mgp=c(2, 1, 0))#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
#
  out.norm <- calc_sample(N=N, f=dnor, a=-5, b=5)#
  plot(density(out.norm$sample), type="l", col="dodgerblue", lwd=2,#
       main="Normal distribution", xlab="")#
  y <- dnorm(x)#
  points(x, y, type = "l", lwd=2)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = N)#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  out.lap <- calc_sample(N=N, f= dlaplace, a=-5, b=5)#
  plot(density(out.lap$sample), type="l", col="dodgerblue", lwd=2,#
       main="Laplace distribution", xlab="")#
  y <- dlaplace(x, m=0, s=1)#
  points(x, y, type = "l")#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  x <- seq(-10, 10, len = N)#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
#
  out.log <- calc_sample(N=N, f=dlogistic, a=-10, b=10)#
  plot(density(out.log$sample), type="l", col="dodgerblue", lwd=2,#
       main="Logistic distribution", xlab="")#
  y <- dlogistic(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
#
  out.gam <- calc_sample(N=N, f=dgam, a=0.001, b=1000)#
#
  plot(density(out.gam$sample), type="l", col="dodgerblue", lwd=2,#
       main="Gamma distribution", xlab="")#
  y <- dgamma(x, shape = 2, scale = 2)#
  points(x, y, type = "l")#
#
  legend("topright", legend=c("Sample", "Theoretical"),#
         col=c("dodgerblue", "black"), lwd=2, bty="n")#
#
  ## *******************************************************#
  ## v. Uniform Distribution#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  out.unif <- calc_sample(N=N, f=dun, a=0, b=1)#
  plot(density(out.unif$sample), type="l", col="dodgerblue", lwd=2,#
       main="Uniform distribution", xlab="")#
#
  y <- dunif(x)#
  points(x, y, type = "l")#
#
  ## *******************************************************#
  ## vi. Beta Distribution#
  x <- seq(0, 1, len = N)#
  dbet <- function(x, alpha=2, b=2){#
    return((x^(alpha-1)*(1-x)^(b-1))/beta(alpha, b))#
  }#
#
  out.beta <- calc_sample(N=N, f=dbet, a=0.01, b=0.99)#
#
  plot(density(out.beta$sample), type="l",#
       col="dodgerblue", lwd=2,#
       main="Beta distribution", xlab="")#
#
  y <- dbet(x)#
  points(x, y, type = "l")#
#
}#
#
N <- 10000#
pdf_f(plot_densities, file="figures/densities.pdf",#
      height=6, width=4)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = N)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-5, 5, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-5, b=5, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-10, 10, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-1, 1, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
rm(list=ls())#
source('~/GitHub/243project/ars/R/tmp_debug.R')#
#
main <- function(N){#
  check_pval <- function(output, fun.name){#
    if(output$p.value <= 0.05){#
      print(paste("did NOT create a good sample with", fun.name,#
                  ", pvalue=", round(output$p.value, 3)))#
    } else {#
      print(paste("passed with", fun.name))#
    }#
  }#
  test_dist <- function(x, FUN, fun.name, a, b, N, rFUN, ...){#
    out <- try(calc_sample(N=N, f=FUN, a=a, b=b),#
               silent=TRUE)#
    if(inherits(out, "try-error")) {#
      print(paste("fails to evaluate with", fun.name))#
    } else {#
      y1 <- rFUN(N,...)#
      test <- ks.test(out$sample, y1)#
      check_pval(test, fun.name)#
    }#
  }#
#
  ## *******************************************************#
  ## i. Standard Normal Distribution#
  x <- seq(-5, 5, len = N)#
  fun.name <- "normal"#
  dnor <- function(x){#
    return((1/(sqrt(2*pi)))*exp(-(x^2)/2))#
  }#
  test_dist(x=x, FUN=dnor,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rnorm)#
  ## *******************************************************#
  ## ii. Laplace Distribution#
  x <- seq(-1, 1, len = 100)#
  fun.name <- "laplace"#
  dlaplace <- function(x, m = 0, s = 1){#
    return(exp(-abs(x-m)/s)/(2*s))#
  }#
#
  rlaplace = function(n, mu, sigma){#
    U = runif(n, 0, 1)#
    sign = ifelse(rbinom(n,1,.5) > 0.5, 1, -1)     #
    y = mu + sign*sigma/sqrt(2)*log(1 - U)  #
    return(y)#
  }#
  test_dist(x=x, FUN=dlaplace,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=rlaplace,#
            mu = 0, sigma = 1)#
  ## *******************************************************#
  ## iii. Logistic Distribution#
  fun.name <- "logistic"#
  dlogistic <- function(x){#
    return(exp(x)/(1+exp(x))^2)#
  }#
  test_dist(x=x, FUN=dlogistic,#
            fun.name=fun.name,#
            a=-10, b=10, N=N, rFUN=rlogis)#
  ## *******************************************************#
  ## iv. Gamma Distribution (chi square)#
  x <- seq(0, 100, len = N)#
  fun.name <- "gamma"#
  dgam <- function(x, theta=2, k=2){#
    return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))#
  }#
  test_dist(x=x, FUN=dgam,#
            fun.name=fun.name,#
            a=0.001, b=1000, N=N, rFUN=rgamma,#
            shape = 2, scale = 2)#
#
  ## *******************************************************#
  ## v.  uniform Distribution (chi square)#
  x <- seq(0, 1, len = 100)#
  fun.name <- "uniform"#
  dun <- function(x){#
    return(dunif(x, min=0, max=1))#
  }#
  test_dist(x=x, FUN=dun,#
            fun.name=fun.name,#
            a=0, b=1, N=N, rFUN=runif)#
#
  ## *******************************************************#
  ## vi.  beta#
  x <- seq(0.01, 0.99, len = N)#
  fun.name <- "beta"#
  dbet <- function(x){#
    return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))#
  }#
  test_dist(x=x, FUN=dbet,#
            fun.name=fun.name,#
            a=0.01, b=0.99, N=N, rFUN=rbeta,#
            shape1=3, shape2=2)#
#
  ## *******************************************************#
  ## vii. non-concave distribution#
  fun.name <- "non-log concave exp(x^2)"#
  de <- function(x){#
    return(exp(x^2))#
  }#
  test_dist(x=x, FUN=de,#
            fun.name=fun.name,#
            a=-1, b=1, N=N, rFUN=NA)#
}#
#
main(1000)
## standardd#
install.packages("parallel")#
#
## community analysis#
install.packages("vegan")#
#
## networks#
install.packages("igraph")#
install.packages("bipartite")#
install.packages("RColorBrewer")#
install.packages("sna")#
#
## phylogeny#
install.packages("TreeSim")#
install.packages("ape")#
install.packages("picante")#
install.packages("geiger")#
#
## misc#
install.packages("mvtnorm")#
install.packages("classInt")#
install.packages("fields")#
install.packages("poilog")#
install.packages("moments")#
#
## jags#
install.packages("rjags")#
install.packages("R2jags")#
install.packages("runjags")#
install.packages("ggmcmc")#
#
## spatial#
install.packages("sp")#
install.packages("rgdal")#
install.packages("raster")#
install.packages("spatstat")#
install.packages("maptools")#
install.packages("SDMTools")#
#
## models#
install.packages("lme4")#
install.packages("RSQLite")#
install.packages("lmerTest")#
install.packages("metafor")#
install.packages("pbkrtest")#
install.packages("glmmADMB", repos=c("http://glmmadmb.r-forge.r-project.org/repos", getOption("repos")),type="source")#
## dynamic docs#
install.packages("knitr")
